name: "Build releases"

on:
  push:
    tags: ['v[0-9]+.[0-9]+.[0-9]+']

env:
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_HUSKY_DONT_INSTALL_HOOKS: true

permissions:
  id-token: write
  contents: write
  attestations: write

jobs: 
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-binaries:
    name: "Build binaries"
    runs-on: ${{ matrix.info.os }}
    needs: release
    continue-on-error: true
    container: ${{ matrix.info.container }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        info:
          # Windows (x86-64, x86)
          - {
              os: "windows-latest",
              target: "x86_64-pc-windows-msvc",
              cross: false,
            }
          - { 
              os: "windows-latest", 
              target: "i686-pc-windows-msvc", 
              cross: false 
            }
    steps:          
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.info.target }}

      - name: Build windows
        if: ${{ contains(matrix.info.os, 'windows') }}
        shell: powershell
        run: |
          choco install openssl -y
          refreshenv

          $env:OPENSSL_DIR = "C:\Program Files\OpenSSL\"
          $env:OPENSSL_LIB_DIR = "C:\Program Files\OpenSSL\lib"
          $env:OPENSSL_INCLUDE_DIR = "C:\Program Files\OpenSSL\include"
          $env:PKG_CONFIG_PATH = "C:\Program Files\OpenSSL\lib\pkgconfig"

          cargo build --release --target ${{ matrix.info.target }}

      - name: Package release (Windows)
        if: matrix.info.os == 'windows-latest'
        shell: powershell
        run: |
          choco install innosetup -y
          refreshenv

          iscc .\release.iss

          Move-Item -Path ".\output\MoonboisSetup.exe" -Destination ".\MoonboisSetup.exe"
          echo "ASSET=.\MoonboisSetup.exe" | Out-File -Append -FilePath "$env:GITHUB_ENV"

      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          tag: ${{ github.ref_name }}